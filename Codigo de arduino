#include <micro_ros_arduino.h>
#include <stdio.h>
#include <rcl/rcl.h>
#include <rcl/error_handling.h>
#include <rclc/rclc.h>
#include <rclc/executor.h>
#include <std_msgs/msg/int32.h>
#include <geometry_msgs/msg/twist.h>
#include <WiFi.h>

// los publicadores y mensajes
rcl_publisher_t left_encoder_publisher;
rcl_publisher_t right_encoder_publisher;
std_msgs__msg__Int32 left_encoder_msg;
std_msgs__msg__Int32 right_encoder_msg;

// suscriptor
rcl_subscription_t twist_subscriber;
geometry_msgs__msg__Twist twist_msg;


rclc_executor_t executor;
rclc_support_t support;
rcl_allocator_t allocator;
rcl_node_t node;
rcl_timer_t timer;

// encoders
#define LeftEncoder_C1 4
#define LeftEncoder_C2 5
#define RightEncoder_C1 18
#define RightEncoder_C2 19

// control de motores (pines)
#define IN1_PIN 14
#define IN2_PIN 27
#define IN3_PIN 16
#define IN4_PIN 17

// pines de ENA y ENB del L298N
#define ENA_PIN 12
#define ENB_PIN 13

// configuracion pwm
#define PWM_CHANNEL_LEFT 0
#define PWM_CHANNEL_RIGHT 1
#define PWM_FREQ 1000
#define PWM_RESOLUTION 8

// velocidad
int motorSpeedLeft = 0;
int motorSpeedRight = 0;

// encoders
volatile int LeftEncoderCount = 0;
volatile int RightEncoderCount = 0;

#define RCCHECK(fn) { rcl_ret_t temp_rc = fn; if ((temp_rc != RCL_RET_OK)) { error_loop(); }}
#define RCSOFTCHECK(fn) { rcl_ret_t temp_rc = fn; if ((temp_rc != RCL_RET_OK)) {} }

void error_loop() {
  while (1) {
    Serial.println("ERROR: Loop bloqueado");
    delay(1000);
  }
}

int limitToMaxValue(int value, int maxLimit) {
  if (value > maxLimit) return maxLimit;
  if (value < -maxLimit) return -maxLimit;
  return value;
}

void timer_callback(rcl_timer_t * timer, int64_t last_call_time) {
  RCLC_UNUSED(last_call_time);
  if (timer != NULL) {
    right_encoder_msg.data = RightEncoderCount;
    left_encoder_msg.data = -LeftEncoderCount;
    RCSOFTCHECK(rcl_publish(&left_encoder_publisher, &left_encoder_msg, NULL));
    RCSOFTCHECK(rcl_publish(&right_encoder_publisher, &right_encoder_msg, NULL));

    // Debug
    Serial.print("Left: ");
    Serial.print(left_encoder_msg.data);
    Serial.print(" | Right: ");
    Serial.println(right_encoder_msg.data);
  }
}

void cmd_vel_callback(const void *msgin) {
  const geometry_msgs__msg__Twist *msg = (const geometry_msgs__msg__Twist *)msgin;

  float linear = msg->linear.x;
  float angular = msg->angular.z;

  motorSpeedLeft = (int)((linear - angular / 2.0) * 1000);
  motorSpeedRight = (int)((linear + angular / 2.0) * 1000);

  if (motorSpeedLeft > 0) motorSpeedLeft += 40;
  if (motorSpeedLeft < 0) motorSpeedLeft -= 40;
  if (motorSpeedRight > 0) motorSpeedRight += 40;
  if (motorSpeedRight < 0) motorSpeedRight -= 40;

  Serial.print("Izquierda: ");
  Serial.print(motorSpeedLeft);
  Serial.print(" | Derecha: ");
  Serial.println(motorSpeedRight);

  setMotorSpeed(motorSpeedLeft, motorSpeedRight);
}

void setMotorSpeed(int speedLeft, int speedRight) {
  speedLeft = limitToMaxValue(speedLeft, 255);
  speedRight = limitToMaxValue(speedRight, 255);

  // Dirección motor izquierdo
  if (speedLeft > 0) {
    digitalWrite(IN1_PIN, HIGH);
    digitalWrite(IN2_PIN, LOW);
  } else if (speedLeft < 0) {
    digitalWrite(IN1_PIN, LOW);
    digitalWrite(IN2_PIN, HIGH);
  } else {
    digitalWrite(IN1_PIN, LOW);
    digitalWrite(IN2_PIN, LOW);
  }

  // dirección motor derecho
  if (speedRight > 0) {
    digitalWrite(IN3_PIN, HIGH);
    digitalWrite(IN4_PIN, LOW);
  } else if (speedRight < 0) {
    digitalWrite(IN3_PIN, LOW);
    digitalWrite(IN4_PIN, HIGH);
  } else {
    digitalWrite(IN3_PIN, LOW);
    digitalWrite(IN4_PIN, LOW);
  }

  //  ENA y ENB
  ledcWrite(PWM_CHANNEL_LEFT, abs(speedLeft));
  ledcWrite(PWM_CHANNEL_RIGHT, abs(speedRight));
}

void setup() {
  Serial.begin(115200);
  delay(2000);
  Serial.println("Iniciando ESP32 con micro-ROS...");

  // Conexión micro-ROS
  set_microros_wifi_transports("Galaxy S10+1ec3", "contraseNaes1", "192.168.139.8", 8888);

  Serial.print("Conectando Wi-Fi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nWi-Fi conectado.");
  Serial.print("IP ESP32: ");
  Serial.println(WiFi.localIP());


  pinMode(LeftEncoder_C1, INPUT_PULLUP);
  pinMode(LeftEncoder_C2, INPUT_PULLUP);
  pinMode(RightEncoder_C1, INPUT_PULLUP);
  pinMode(RightEncoder_C2, INPUT_PULLUP);

  
  pinMode(IN1_PIN, OUTPUT);
  pinMode(IN2_PIN, OUTPUT);
  pinMode(IN3_PIN, OUTPUT);
  pinMode(IN4_PIN, OUTPUT);

  // interrupciones encoders
  attachInterrupt(digitalPinToInterrupt(LeftEncoder_C1), LeftEncoderCallback, CHANGE);
  attachInterrupt(digitalPinToInterrupt(RightEncoder_C1), RightEncoderCallback, CHANGE);

  //ENA y ENB
  ledcSetup(PWM_CHANNEL_LEFT, PWM_FREQ, PWM_RESOLUTION);
  ledcAttachPin(ENA_PIN, PWM_CHANNEL_LEFT);

  ledcSetup(PWM_CHANNEL_RIGHT, PWM_FREQ, PWM_RESOLUTION);
  ledcAttachPin(ENB_PIN, PWM_CHANNEL_RIGHT);

  allocator = rcl_get_default_allocator();

  RCCHECK(rclc_support_init(&support, 0, NULL, &allocator));
  RCCHECK(rclc_node_init_default(&node, "lineturtle_esp32", "", &support));

  RCCHECK(rclc_subscription_init_default(
    &twist_subscriber,
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist),
    "cmd_vel"));

  RCCHECK(rclc_publisher_init_default(
    &left_encoder_publisher,
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
    "izquierdo_motor_ticks"));

  RCCHECK(rclc_publisher_init_default(
    &right_encoder_publisher,
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
    "derecho_motor_ticks"));

  const unsigned int timer_timeout = 100;
  RCCHECK(rclc_timer_init_default(&timer, &support, RCL_MS_TO_NS(timer_timeout), timer_callback));

  RCCHECK(rclc_executor_init(&executor, &support.context, 2, &allocator));
  RCCHECK(rclc_executor_add_timer(&executor, &timer));
  RCCHECK(rclc_executor_add_subscription(&executor, &twist_subscriber, &twist_msg, &cmd_vel_callback, ON_NEW_DATA));

  left_encoder_msg.data = 0;
  right_encoder_msg.data = 0;
}

void loop() {
  delay(10);
  RCCHECK(rclc_executor_spin_some(&executor, RCL_MS_TO_NS(10)));
}

void LeftEncoderCallback() {
  if (digitalRead(LeftEncoder_C1) == digitalRead(LeftEncoder_C2)) {
    LeftEncoderCount++;
  } else {
    LeftEncoderCount--;
  }
}

void RightEncoderCallback() {
  if (digitalRead(RightEncoder_C1) == digitalRead(RightEncoder_C2)) {
    RightEncoderCount++;
  } else {
    RightEncoderCount--;
  }
}
